import { Orders, Order, Asset, IOrderbook } from '@gardenfi/orderbook';
import { ISwapper } from './swapper';
import { IGardenJS, Wallets } from './garden.types';

/**
 * GardenJS is the core component of the Garden SDK. It allows you to create orders,
 * subscribe to order updates, and perform initiates, redeems, and refunds on swaps.
 *
 * Visit the [GardenJS documentation](https://docs.garden.finance/developers/sdk/) for more information.
 */
export declare class GardenJS implements IGardenJS {
    private readonly orderbook;
    private readonly wallets;
    /**
     * @constructor
     *
     * @param {IOrderbook} orderbook - The orderbook you want to connect to
     * @param {Partial<Wallets>} wallets - Each field in the wallet corresponds to the chain name and it's corresponding value is the wallet
     *
     */
    constructor(orderbook: IOrderbook, wallets: Partial<Wallets>);
    subscribeOrders(address: string, callback: (orders: Orders) => void): void;
    unsubscribeOrders(): void;
    /**
     * Creates a swap order in the orderbook backend. Checkout `Assets` from @gardenfi/orderbook for the available assets
     * @param from from asset (e.g. Assets.ethereum.WBTC)
     * @param to to asset (e.g. Assets.bitcoin.BTC)
     * @param amt send amount
     * @param receiveAmount receive amount
     * @param opts if the swap destination is bitcoin, you can provide a btcInputAddress to redeem funds to.
     * @returns order id
     *
     * Note: localnet assets require `merry` running, else it will throw an error saying unsupported asset.
     */
    swap(from: Asset, to: Asset, amt: number, receiveAmount: number, opts?: {
        btcUserAddress?: string;
    }): Promise<number>;
    /**
     * Given an order, returns a Swapper instance to progress the swap (init, redeem, refund)
     */
    getSwap(order: Order): ISwapper;
    /**
     * Calculates the receive amount for the given send amount. The send amount should be in it's lowest denomination
     */
    calculateReceiveAmt(from: Asset, to: Asset, sendAmt: number): Promise<number>;
    private getBitcoinWallet;
}
