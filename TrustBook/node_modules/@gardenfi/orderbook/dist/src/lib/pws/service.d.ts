import { JsonRpcSigner, Wallet } from 'ethers';
import { ConditionalPaymentFinalRequest, ConditionalPaymentInitialRequest, IPaymentChannelService as IPaymentChannelService, PaymentChannelState } from './interface';
import { AsyncResult } from '@catalogfi/utils';
import { IAuth } from '../auth/auth.interface';

export declare class PaymentChannelService implements IPaymentChannelService {
    private api;
    private signer;
    private provider;
    private auth;
    private constructor();
    static init(api: string, signer: JsonRpcSigner | Wallet, auth: IAuth): PaymentChannelService;
    /**
     * creates a new payment channel with the specified deposit amount
     */
    createChannel(depositAmt?: string): AsyncResult<PaymentChannelState, string>;
    /**
     * gets the latest state of the payment channel associated with the address
     *
     * Note: Currently only returns the first channel
     */
    getChannel(): AsyncResult<PaymentChannelState, string>;
    private _getAuthToken;
    private getSignatureForConditionalPayment;
    private _lockChannel;
    payConditionally(request: Omit<ConditionalPaymentInitialRequest, 'timeLock'>): AsyncResult<void, string>;
    /**
     * Constructs a conditional payment request for backend to accept.
     *
     * Use .payConditionally() to actually pay conditionally.
     */
    createConditionalPayment(paymentRequest: Omit<ConditionalPaymentInitialRequest, 'timeLock'>): AsyncResult<ConditionalPaymentFinalRequest, string>;
}
