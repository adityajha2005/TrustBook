"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const p=require("@catalogfi/extension"),a=require("bitcoinjs-lib"),r=require("yup"),h=require("./index3.cjs"),i=require("./index7.cjs"),v=require("./index9.cjs"),u=require("./index13.cjs"),n={getAddress:"btc_getAddress",getBalance:"btc_getBalance",getPublicKey:"btc_getPublicKey",getNetwork:"btc_getNetwork",getWalletConfig:"btc_getWalletConfig",sign:"btc_sign",send:"btc_send",spend:"btc_spend"};class d extends h.AbstractBitcoinWallet{constructor(t){super(),this.connector=t}static async detect(){const t=new p.Connector;return new d(t)}async getBalance(){const t=await this.connector.send(n.getBalance);return await r.number().required().validate(t)}async getPublicKey(){const t=await this.connector.send(n.getPublicKey);return await r.string().required().validate(t)}async getProviderNetwork(){const t=await this.connector.send(n.getNetwork);return r.mixed().oneOf([i.BitcoinNetwork.Mainnet,i.BitcoinNetwork.Testnet,i.BitcoinNetwork.Regtest]).required().validate(t)}async getNetwork(){const t=await this.getProviderNetwork();if(t===i.BitcoinNetwork.Mainnet)return a.networks.bitcoin;if(t===i.BitcoinNetwork.Testnet)return a.networks.testnet;if(t===i.BitcoinNetwork.Regtest)return a.networks.regtest;throw new Error("Invalid network from catalog wallet")}async getProvider(){const t=await this.getProviderNetwork();return new v.BitcoinProvider(t)}async send(t,s,o){const c=await this.connector.send(n.send,{toAddress:t,amt:s,fee:o});return await r.string().required().validate(c)}async spend(t,s,{toAddress:o,fee:c,nSequence:g,unlockScript:l,witness:w}){const b=w?.map(e=>e instanceof u.AddSignature?e.toString():e.toString("hex")),k=l?.map(e=>{if(e instanceof u.AddSignature)return e.toString();if(e instanceof Buffer)return e.toString("hex");if(typeof e=="number")return"num_"+e.toString();throw new Error("Invalid unlock script")}),f=await this.connector.send(n.spend,{script:t.toString("hex"),scriptAddress:s,witness:b,toAddress:o,fee:c,unlockScript:k,nSequence:g});return await r.string().required().validate(f)}walletConfig(){throw new Error("Method not supported")}async getAddress(){const t=await this.connector.send(n.getAddress);return await r.string().required().validate(t)}async sign(t){const s=await this.connector.send(n.sign,{hexMsg:t});return await r.string().required().validate(s)}}exports.BitcoinActions=n;exports.BitcoinRpcProvider=d;
