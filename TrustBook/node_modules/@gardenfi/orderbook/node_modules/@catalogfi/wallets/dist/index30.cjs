"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const i=require("@catalogfi/utils"),t=require("./index11.cjs"),s={CreateWallet:"btc_createWallet",GetWallet:"btc_getWallet",GetRefundTx:"btc_getRefundTx",SubmitDeposit:"btc_submitDeposit",Send:"btc_send",Commit:"btc_commit",GetCommitment:"btc_getCommitment"};class n{constructor(e){this.url=e,this.client=new i.JsonRpc(this.url)}async createWallet(e){if(!e)throw new Error(t.GuardianErrors.UserPubKeyRequired);if(e.length!==66)throw new Error(t.GuardianErrors.InvalidPublicKey);const r=await this.rpcRequest(s.CreateWallet,{user_public_key:e});if(r.error&&r.error.message==="Invalid params")throw new Error(t.GuardianErrors.InvalidPublicKey);if(!r.result)throw new Error(JSON.stringify(r));return r.result}async getWalletByAddress(e){if(!e)throw new Error(t.GuardianErrors.WalletAddressRequired);const r=await this.rpcRequest(s.GetWallet,{wallet_address:e});if(r.error&&r.error.data.includes("not found"))throw new Error(t.GuardianErrors.WalletNotFound);if(r.error&&r.error.data.includes("invalid byte"))throw new Error(t.GuardianErrors.InvalidPublicKey);if(!r.result)throw new Error(JSON.stringify(r));return r.result}async getWallet(e){if(!e)throw new Error(t.GuardianErrors.UserPubKeyRequired);const r=await this.rpcRequest(s.GetWallet,{public_key:e});if(r.error&&r.error.data.includes("not found"))throw new Error(t.GuardianErrors.WalletNotFound);if(r.error&&r.error.data.includes("invalid byte"))throw new Error(t.GuardianErrors.InvalidPublicKey);if(!r.result)throw new Error(JSON.stringify(r));return r.result}async getRefundTx(e){const r=await this.rpcRequest(s.GetRefundTx,e);if(r.error)throw console.log(r.error),new Error(r.error?.data??r.error.message);if(!r.result)throw new Error(JSON.stringify(r));return r.result}async submitDepositTx(e){const r=await this.rpcRequest(s.SubmitDeposit,e);if(r.error)throw console.log(r.error),new Error(r.error.message)}async send(e){const r=await this.rpcRequest(s.Send,e);if(r.error){if(r.error.code===-32602&&r.error.data.includes("wallet not ready for spending")){const o=await this.getWalletByAddress(e.wallet_address);if(o.redeem_tx)return{guardian_signature:o.redeem_tx.guardian_signature}}throw console.log(r.error),new Error(r.error?.data??r.error.message)}if(!r.result)throw new Error(JSON.stringify(r));return r.result}async commit(e){const r=await this.rpcRequest(s.Commit,e);if(r.error)throw new Error(r.error.message);if(!r.result)throw new Error(JSON.stringify(r));return r.result}async getCommitment(e){const r=await this.rpcRequest(s.GetCommitment,{tx_hash:e});if(r.error)throw new Error(r.error.message);if(!r.result)throw new Error(JSON.stringify(r));return r.result}rpcRequest(e,r){const o={method:e,params:r,id:1,version:"2.0"};return this.client.sendRequest(o)}}exports.Guardian=n;
