import { GuardianRefundResponse, GuardianWallet } from './types';
import { Network } from 'bitcoinjs-lib';
import { BitcoinWalletConfig } from '../wallet.interface';
import { IBitcoinProvider, Urgency } from '../provider.interface';
import { AbstractBitcoinWallet } from '../abstractWallet';

/**
 * @deprecated
 */
export declare class BitcoinGuardianWallet extends AbstractBitcoinWallet {
    private signer;
    private readonly provider;
    private readonly minAmt;
    private readonly network;
    private readonly guardian;
    private readonly path;
    private readonly index;
    private constructor();
    /**
     * Uses bip44 to generate a bitcoin wallet from mnemonic
     */
    static fromMnemonic(mnemonic: string, provider: IBitcoinProvider, opts?: {
        guardianApiUrl?: string;
        index?: number;
    }): BitcoinGuardianWallet;
    static fromPrivateKey(privateKey: string, provider: IBitcoinProvider, opts?: {
        guardianApiUrl?: string;
    }): BitcoinGuardianWallet;
    walletConfig(): BitcoinWalletConfig;
    signSchnorr(buf: Buffer): Promise<Buffer>;
    getGuardianWallet(): Promise<GuardianWallet>;
    /**
     * @returns the p2pkh address of the wallet
     */
    getAddress(): Promise<string>;
    /**
     * @returns guardian wallet address
     * */
    getGuardianWalletAddress(): Promise<string>;
    suggestFee(amount: number, urgency: Urgency): Promise<number>;
    /**
     * @returns the balance of the guardian wallet
     */
    getBalance(): Promise<number>;
    /**
     * Signs the given hex string with the signer
     * @param hexString data to be signed
     * @returns the signature
     */
    sign(hexString: string): Promise<string>;
    /**
     * @returns the public key of the master wallet
     */
    getPublicKey(): Promise<string>;
    /**
     * @returns the network of the wallet
     */
    getNetwork(): Promise<Network>;
    /**
     * @returns the provider of the wallet
     */
    getProvider(): Promise<IBitcoinProvider>;
    /**
     * Moves the funds from the master wallet to the guardian wallet
     * @param amount amount to be deposited from master wallet
     * @returns the transaction hash
     *
     * @note You need to have funds in master wallet to deposit into guardian wallet
     */
    deposit(amount: number): Promise<{
        txHex: string;
        txId: string;
        refundDetails: GuardianRefundResponse;
        broadcastError?: string;
    }>;
    private getUTXO;
    send(toAddress: string, amt: number, fee?: number | undefined): Promise<string>;
    spend(script: Buffer, witness: Buffer[], toAddress?: string | undefined, nSequence?: number | undefined): Promise<string>;
    private setMultiSigWitness;
    private isFunded;
    private getScriptSigP2PKH;
    /**
     * Only adds the UTXO if wallet has a funding utxo
     * @param tx Bitcoin transaction
     * @param gw Guardian wallet
     * @returns the transaction with guardian funding utxo added
     */
    private addGuardianUTXO;
    private getFundingUTXOAmt;
    private generateSecret;
}
