var c=(s,t,e)=>{if(!t.has(s))throw TypeError("Cannot "+e)};var i=(s,t,e)=>(c(s,t,"read from private field"),e?e.call(s):t.get(s)),l=(s,t,e)=>{if(t.has(s))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(s):t.set(s,e)},h=(s,t,e,a)=>(c(s,t,"write to private field"),a?a.call(s,e):t.set(s,e),e);var o;import{pbkdf2 as u}from"./index31.js";import{sha256 as m}from"./index32.js";import y from"@catalogfi/encrypto";function p(s,t){const e=u(m,s,t,{c:32,dkLen:32});return Buffer.from(e).toString("hex").slice(0,32)}const r=class r{constructor(t,e){this.store=t,this.key=p(e,r.salt)}async get(t){const e=await this.store.get(t);return e===null?null:y.decryptWithKey(e,this.key,r.salt).decryptedData}set(t,e){const a=y.encryptWithKey(e,this.key,r.salt);return this.store.set(t,a.encryptedData),Promise.resolve()}};r.salt="c47a106f1c47a106";let n=r;class f{constructor(){l(this,o,void 0);h(this,o,new Map)}get(t){return Promise.resolve(i(this,o).get(t)||null)}set(t,e){return i(this,o).set(t,e),Promise.resolve()}}o=new WeakMap;export{n as EncryptedStore,f as WalletMemoryStore};
