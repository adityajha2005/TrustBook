import { GuardianBtcSendRequest, GuardianBtcSendResponse, GuardianCommitmentRequest, GuardianCommitmentResponse, GuardianCreateWallet, GuardianDepositRequest, GuardianRefundRequest, GuardianRefundResponse, GuardianWallet } from './types';

export interface IGuardian {
    createWallet(userPubkey: string): Promise<GuardianCreateWallet>;
    getWallet(userPublicKey: string): Promise<GuardianWallet>;
    getWalletByAddress(walletAddress: string): Promise<GuardianWallet>;
    getRefundTx(params: GuardianRefundRequest): Promise<GuardianRefundResponse>;
    submitDepositTx(params: GuardianDepositRequest): Promise<void>;
    send(params: GuardianBtcSendRequest): Promise<GuardianBtcSendResponse>;
    commit(params: GuardianCommitmentRequest): Promise<GuardianCommitmentResponse>;
    getCommitment(txHash: string): Promise<GuardianCommitmentResponse>;
}
export declare class Guardian implements IGuardian {
    private url;
    private client;
    /**
     * @constructor
     * Creates a new instance of Guardian
     * @param {string} url - Guardian JsonRPC url
     */
    constructor(url: string);
    /**
     * Creates a guardian wallet with the given user's public key
     * @param userPubkey this should be from `bitcoinWallet.getPublicKey()`
     * @returns {GuardianCreateWallet} user guardian wallet address and guardian public key
     */
    createWallet(userPubkey: string): Promise<GuardianCreateWallet>;
    /**
     * Gets the user guardian wallet details
     *
     * @param walletAddress guardian wallet address
     * @returns {GuardianWallet} guardian wallet details
     *
     * @throws If the wallet does not already exist or if it address is invalid
     */
    getWalletByAddress(walletAddress: string): Promise<GuardianWallet>;
    /**
     * Gets the user guardian wallet details
     * @param userPublicKey user public key
     * @returns {GuardianWallet} guardian wallet details
     */
    getWallet(userPublicKey: string): Promise<GuardianWallet>;
    /**
     * Gets the refund transaction for the given deposit tx
     */
    getRefundTx(params: GuardianRefundRequest): Promise<GuardianRefundResponse>;
    /**
     * Submits the deposit transaction to the guardian
     */
    submitDepositTx(params: GuardianDepositRequest): Promise<void>;
    send(params: GuardianBtcSendRequest): Promise<GuardianBtcSendResponse>;
    commit(params: GuardianCommitmentRequest): Promise<GuardianCommitmentResponse>;
    getCommitment(txHash: string): Promise<GuardianCommitmentResponse>;
    private rpcRequest;
}
