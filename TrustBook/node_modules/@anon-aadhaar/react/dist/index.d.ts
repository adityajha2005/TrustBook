import { AnonAadhaarArgs, AnonAadhaarCore, FieldsToRevealArray, ProverState } from '@anon-aadhaar/core';
import { SerializedPCD } from '@pcd/pcd-types';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode, Dispatch, SetStateAction, CSSProperties } from 'react';

/**
 * `useAnonAadhaar` is a custom React hook that provides convenient access to the Anon Aadhaar authentication state
 * and a function to initiate the login process. This hook is designed to be used within components that are
 * nested inside `AnonAadhaarProvider`.
 *
 * @returns { [AnonAadhaarState, (request: AnonAadhaarRequest) => void] }
 * An array containing:
 *   - `AnonAadhaarState`: The current state of the Anon Aadhaar authentication process. This includes any relevant
 *     data about the current authentication status, user information, or error states.
 *   - `startReq`: A function that initiates the login/logout process. This function takes an `AnonAadhaarRequest` object
 *     as its argument, which includes the necessary information to start the authentication process.
 */
declare function useAnonAadhaar(): [
    AnonAadhaarState,
    (request: AnonAadhaarRequest) => void
];
type AnonAadhaarRequest = {
    type: 'login';
    args: AnonAadhaarArgs;
} | {
    type: 'logout';
};
type AnonAadhaarState = {
    /** Whether the user is logged in. @see ProveButton */
    status: 'logged-out' | 'logged-in' | 'logging-in';
} & ({
    status: 'logged-out';
} | {
    status: 'logging-in';
    anonAadhaarProofs?: {
        [key: number]: SerializedPCD<AnonAadhaarCore>;
    };
} | {
    status: 'logged-in';
    anonAadhaarProofs: {
        [key: number]: SerializedPCD<AnonAadhaarCore>;
    };
});

type ArtifactsLinks = {
    zkey_url: string;
    wasm_url: string;
    vkey_url: string;
};
type AnonAadhaarProviderProps = {
    /**
     * `children`: The ReactNode elements that form the child components of your application.
     * This is a standard prop for components that wrap around other components to provide context or styling.
     */
    children: ReactNode;
    /**
     * `_artifactslinks`: Here you can specify your own artifacts.
     * It can be either file located in your public directory by specifying the root (e.g. "./circuit_final.zkey")
     * or the url of artifacts that you stored on your own server.
     */
    _artifactslinks?: ArtifactsLinks;
    /**
     * `_appName`: Name of your app
     */
    _appName?: string;
    /**
     * `_useTestAadhaar`: Set the SDK to be in test mode
     */
    _useTestAadhaar?: boolean;
};
/**
 * AnonAadhaarProvider is a React component that serves as a provider for the
 * AnonAadhaarContext. It manages the authentication state, login requests,
 * and communication with the proving component. This provider initializes the
 * authentication state from local storage on page load and handles updates to
 * the state when login requests are made and when new proofs are received.
 *
 * @param {AnonAadhaarProviderProps}  anonAadhaarProviderProps
 *
 * @returns A JSX element that wraps the provided child components with the
 * AnonAadhaarContext.Provider.
 */
declare function AnonAadhaarProvider(anonAadhaarProviderProps: AnonAadhaarProviderProps): react_jsx_runtime.JSX.Element;

declare const AnonAadhaarProof: ({ code, label, }: {
    code: string;
    label?: string;
}) => react_jsx_runtime.JSX.Element;

interface LogInWithAnonAadhaarProps$1 {
    signal?: string;
    fieldsToReveal?: FieldsToRevealArray;
    nullifierSeed: number | bigint;
}
/**
 * LogInWithAnonAadhaar is a React component that provides a user interface
 * for logging in and logging out using the AnonAadhaarContext. It renders a
 * button that triggers a login modal when clicked, and provides methods to
 * initiate user login using the anon aadhaar zk circuit. The component utilizes
 * the authentication state and login request function from the context.
 *
 * @returns A JSX element representing the LogInWithAnonAadhaar component.
 */
declare const LogInWithAnonAadhaar: ({ signal, fieldsToReveal, nullifierSeed, }: LogInWithAnonAadhaarProps$1) => react_jsx_runtime.JSX.Element;

/**
 * `proveAndSerialize` is a function that generates proofs using the web-based proving system of Anon Aadhaar.
 * It takes an argument of type `AnonAadhaarArgs` and returns a Promise. This Promise resolves to an object containing
 * the generated `anonAadhaarProof` (`AnonAadhaarCore`) and its serialized form (`SerializedPCD<AnonAadhaarCore>`).
 *
 * @param {AnonAadhaarArgs} anonAadhaarArgs - The arguments required to generate the IdentityPCD.
 * @returns {Promise<{anonAadhaarProof: AnonAadhaarCore, serialized: SerializedPCD<AnonAadhaarCore>}>}
 *   A Promise resolving to an object with the generated anonAadhaarProof and its serialized form.
 *
 * @see {@link https://github.com/anon-aadhaar/anon-aadhaar}
 *   For more information about the Anon Aadhaar's underlying circuit and proving system.
 */
declare const proveAndSerialize: (anonAadhaarArgs: AnonAadhaarArgs, setProverState?: Dispatch<SetStateAction<ProverState>>) => Promise<{
    anonAadhaarProof: AnonAadhaarCore;
    serialized: SerializedPCD<AnonAadhaarCore>;
}>;
/**
 * `processAadhaarArgs` is a function that processes QR data to generate arguments required by the prover.
 * It converts the QR data scanned into a format suitable for generating proofs in the Anon Aadhaar system.
 *
 * @param {string} qrData - The QR data scanned by the user. This data contains the information necessary
 *                          to generate the arguments for the IdentityPCD.
 * @param {boolean} useTestAadhaar - A flag indicating whether to use test Aadhaar data. This helps in
 *                                   differentiating between a production and a test environment.
 * @returns {Promise<AnonAadhaarArgs>} A Promise that resolves to the `AnonAadhaarArgs` object.
 *                                     This object contains the parameters needed to generate a proof.
 *
 */
declare const processAadhaarArgs: (qrData: string, useTestAadhaar: boolean, nullifierSeed: number | bigint, fieldsToRevealArray?: FieldsToRevealArray, signal?: string) => Promise<AnonAadhaarArgs>;

/**
 * `verifySignature` verifies the digital signature of the provided data.
 * It first converts the string data to a big integer, processes it into a byte array,
 * and then decompresses this byte array. After extracting the signature and signed data,
 * it fetches the public key from a certificate URL, and uses this public key to verify
 * the signature against the signed data.
 *
 * @param {string} qrData - The string representation of the data to be verified.
 * @param {boolean} useTestAadhaar - A flag indicating whether to use the test Aadhaar Data or real Aadhaar data.
 * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the signature is valid.
 *
 * @remarks
 * The function fetches a public key certificate from UIDAI's server (for India's Aadhaar system),
 * either from the production or testing environment based on the `testing` flag.
 * It then uses this public key to verify the signature.
 */
declare const verifySignature: (qrData: string, useTestAadhaar: boolean) => Promise<{
    isSignatureValid: boolean;
    certificate?: string;
}>;

interface LogInWithAnonAadhaarProps {
    signal?: string;
    buttonStyle?: CSSProperties;
    buttonTitle?: string;
    fieldsToReveal?: FieldsToRevealArray;
    nullifierSeed: number | bigint;
}
/**
 * LaunchProveModal is a React component that provides a user interface
 * to launch the prove Modal and start the proof generation using the AnonAadhaarContext.
 * It renders a button that triggers a prove modal when clicked, and provides methods to
 * initiate user proof using the anon aadhaar zk circuit.
 *
 * @returns A JSX element representing the LaunchProveModal component.
 */
declare const LaunchProveModal: ({ signal, buttonStyle, fieldsToReveal, nullifierSeed, buttonTitle, }: LogInWithAnonAadhaarProps) => react_jsx_runtime.JSX.Element;

/**
 * `useProver` is a custom React hook that manages the state related to Anon Aadhaar authentication within the application.
 * It facilitates access to the authentication state and exposes a function to handle login or logout requests.
 * This hook should be used within components wrapped by `AnonAadhaarProvider` to ensure access to the appropriate context.
 *
 * @returns { [ProverState, AnonAadhaarCore | undefined] }
 * A tuple (2-element array) where the first element is the `ProverState`, representing the current state of the
 * authentication process, which includes information like authentication status, user details, or any error information.
 * The second element is `AnonAadhaarCore` or `undefined`, which represents the deserialized proof of the authentication
 * if available, signifying a successful login state.
 */
declare function useProver(): [ProverState, AnonAadhaarCore | undefined];

export { AnonAadhaarProof, AnonAadhaarProvider, LaunchProveModal, LogInWithAnonAadhaar, processAadhaarArgs, proveAndSerialize, useAnonAadhaar, useProver, verifySignature };
