import { MarkRequired } from '@catalogfi/utils';
import { AtomicSwapConfig } from '../ASConfig';
import { IBaseWallet, WalletChain } from '../baseWallet';
import { IHTLCWallet } from '../htlc';
import { BrowserProvider, JsonRpcApiProvider, Provider, TransactionResponse, TypedDataDomain, TypedDataField, JsonRpcSigner, Wallet } from 'ethers';

export type EVMProvider = JsonRpcApiProvider | Provider | BrowserProvider;
export type EVMSwapConfig = MarkRequired<AtomicSwapConfig, 'chain' | 'contractAddress'>;
export interface IEVMWallet extends IBaseWallet {
    contractCall(contractCallConfig: {
        to: string;
        data: string;
        from?: string;
        value?: string;
    }): Promise<TransactionResponse>;
    getAddress(): Promise<string>;
    getProvider(): EVMProvider;
    rpc(name: string, args: unknown[] | Record<string, unknown>): Promise<unknown>;
    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, unknown>): Promise<string>;
    getSigner(): JsonRpcSigner | Wallet;
}
export declare abstract class AbstractEVMWallet implements IEVMWallet {
    abstract sign(hexMsg: string): Promise<string>;
    abstract contractCall(contractCallConfig: {
        to: string;
        data: string;
        from?: string;
        value?: string;
    }): Promise<TransactionResponse>;
    abstract getAddress(): Promise<string>;
    abstract getProvider(): EVMProvider;
    abstract rpc(name: string, args: unknown[] | Record<string, unknown>): Promise<unknown>;
    abstract signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, unknown>): Promise<string>;
    newSwap(swapConfig: EVMSwapConfig): Promise<IHTLCWallet>;
    /**
     * Returns the chain of the wallet. It can be Bitcoin or EVM
     */
    chain(): WalletChain;
    abstract getSigner(): JsonRpcSigner | Wallet;
}
export declare class EVMHTLC implements IHTLCWallet {
    private swap;
    private readonly wallet;
    private AtomicSwapContract;
    /**
     * @constructor
     * @param {EVMSwapConfig} swap - Atomic swap config, chain must be provided
     * @param {IEVMWallet} wallet
     */
    constructor(swap: EVMSwapConfig, wallet: IEVMWallet);
    /**
     * The atomic swap contract address associated with the passed chain
     *
     * @returns {string} The contract address
     */
    id(): string;
    /**
     * Initiates the HTLC
     *
     * @returns {Promise<string>} Transaction ID
     */
    init(): Promise<string>;
    /**
     * Redeems the HTLC
     *
     * @returns {Promise<string>} Transaction ID
     */
    redeem(secret: string): Promise<string>;
    /**
     * Refunds the HTLC
     *
     * @returns {Promise<string>} Transaction ID
     */
    refund(): Promise<string>;
    private contractExecutor;
}
