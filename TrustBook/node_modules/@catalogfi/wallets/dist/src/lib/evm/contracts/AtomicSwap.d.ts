import { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from './common';
import { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from 'ethers';

export interface AtomicSwapInterface extends Interface {
    getFunction(nameOrSignature: "atomicSwapOrders" | "initiate" | "redeem" | "refund" | "token"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Initiated" | "Redeemed" | "Refunded"): EventFragment;
    encodeFunctionData(functionFragment: "atomicSwapOrders", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "initiate", values: [AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "redeem", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    decodeFunctionResult(functionFragment: "atomicSwapOrders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initiate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}
export declare namespace InitiatedEvent {
    type InputTuple = [
        orderId: BytesLike,
        secretHash: BytesLike,
        initiatedAt: BigNumberish,
        amount: BigNumberish
    ];
    type OutputTuple = [
        orderId: string,
        secretHash: string,
        initiatedAt: bigint,
        amount: bigint
    ];
    interface OutputObject {
        orderId: string;
        secretHash: string;
        initiatedAt: bigint;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RedeemedEvent {
    type InputTuple = [
        orderId: BytesLike,
        secrectHash: BytesLike,
        secret: BytesLike
    ];
    type OutputTuple = [
        orderId: string,
        secrectHash: string,
        secret: string
    ];
    interface OutputObject {
        orderId: string;
        secrectHash: string;
        secret: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RefundedEvent {
    type InputTuple = [orderId: BytesLike];
    type OutputTuple = [orderId: string];
    interface OutputObject {
        orderId: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface AtomicSwap extends BaseContract {
    connect(runner?: ContractRunner | null): AtomicSwap;
    waitForDeployment(): Promise<this>;
    interface: AtomicSwapInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    atomicSwapOrders: TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            string,
            string,
            bigint,
            bigint,
            bigint,
            boolean
        ] & {
            redeemer: string;
            initiator: string;
            expiry: bigint;
            initiatedAt: bigint;
            amount: bigint;
            isFulfilled: boolean;
        }
    ], "view">;
    initiate: TypedContractMethod<[
        _redeemer: AddressLike,
        _expiry: BigNumberish,
        _amount: BigNumberish,
        _secretHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    redeem: TypedContractMethod<[
        _orderId: BytesLike,
        _secret: BytesLike
    ], [
        void
    ], "nonpayable">;
    refund: TypedContractMethod<[_orderId: BytesLike], [void], "nonpayable">;
    token: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "atomicSwapOrders"): TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            string,
            string,
            bigint,
            bigint,
            bigint,
            boolean
        ] & {
            redeemer: string;
            initiator: string;
            expiry: bigint;
            initiatedAt: bigint;
            amount: bigint;
            isFulfilled: boolean;
        }
    ], "view">;
    getFunction(nameOrSignature: "initiate"): TypedContractMethod<[
        _redeemer: AddressLike,
        _expiry: BigNumberish,
        _amount: BigNumberish,
        _secretHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
        _orderId: BytesLike,
        _secret: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "refund"): TypedContractMethod<[_orderId: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "Initiated"): TypedContractEvent<InitiatedEvent.InputTuple, InitiatedEvent.OutputTuple, InitiatedEvent.OutputObject>;
    getEvent(key: "Redeemed"): TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
    getEvent(key: "Refunded"): TypedContractEvent<RefundedEvent.InputTuple, RefundedEvent.OutputTuple, RefundedEvent.OutputObject>;
    filters: {
        "Initiated(bytes32,bytes32,uint256,uint256)": TypedContractEvent<InitiatedEvent.InputTuple, InitiatedEvent.OutputTuple, InitiatedEvent.OutputObject>;
        Initiated: TypedContractEvent<InitiatedEvent.InputTuple, InitiatedEvent.OutputTuple, InitiatedEvent.OutputObject>;
        "Redeemed(bytes32,bytes32,bytes)": TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
        Redeemed: TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
        "Refunded(bytes32)": TypedContractEvent<RefundedEvent.InputTuple, RefundedEvent.OutputTuple, RefundedEvent.OutputObject>;
        Refunded: TypedContractEvent<RefundedEvent.InputTuple, RefundedEvent.OutputTuple, RefundedEvent.OutputObject>;
    };
}
