import{hash as I,number as h}from"./index33.js";import{hmac as b}from"./index34.js";import{createView as F,checkOpts as P,toBytes as w}from"./index35.js";function g(e,a,c,r){I(e);const u=P({dkLen:32,asyncTick:10},r),{c:i,dkLen:o,asyncTick:t}=u;if(h(i),h(o),h(t),i<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const d=w(a),s=w(c),l=new Uint8Array(o),f=b.create(e,d),n=f._cloneInto().update(s);return{c:i,dkLen:o,asyncTick:t,DK:l,PRF:f,PRFSalt:n}}function R(e,a,c,r,u){return e.destroy(),a.destroy(),r&&r.destroy(),u.fill(0),c}function T(e,a,c,r){const{c:u,dkLen:i,DK:o,PRF:t,PRFSalt:d}=g(e,a,c,r);let s;const l=new Uint8Array(4),f=F(l),n=new Uint8Array(t.outputLen);for(let m=1,p=0;p<i;m++,p+=t.outputLen){const y=o.subarray(p,p+t.outputLen);f.setInt32(0,m,!1),(s=d._cloneInto(s)).update(l).digestInto(n),y.set(n.subarray(0,y.length));for(let L=1;L<u;L++){t._cloneInto(s).update(n).digestInto(n);for(let k=0;k<y.length;k++)y[k]^=n[k]}}return R(t,d,o,s,n)}export{T as pbkdf2};
